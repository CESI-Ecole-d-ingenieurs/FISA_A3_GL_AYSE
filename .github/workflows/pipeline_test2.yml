name: CI - Tests & Analyse EasySave2 

on:
  push:
    branches:
       - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: 🔍 Vérifications & Tests
    runs-on: windows-latest 

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v3

      - name: 🛠️ Installation de .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
     
      - name: 📦 Installation des outils de build Visual Studio
        uses: microsoft/setup-msbuild@v1

      - name: 🔧 Installation de .NET Framework 4.7.2 via Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          Invoke-WebRequest -Uri https://community.chocolatey.org/install.ps1 -UseBasicParsing | Invoke-Expression
          choco install netfx-4.7.2-devpack -y
        shell: powershell

      - name: 📦 Restauration des dépendances pour .NET Core/.NET 8
        run: dotnet restore --source "https://api.nuget.org/v3/index.json"

      - name: 📦 Restauration des dépendances pour .NET Framework
        run: nuget restore ProjetV0.1.sln

      - name: 🔨 Nettoyage des fichiers de build existants
        run: |
          dotnet clean
          "& 'C:\Program Files\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin\MSBuild.exe' /t:Clean /p:Configuration=Release /p:Platform="Any CPU""
        shell: powershell

      - name: 🔨 Compilation du projet .NET Core/.NET 8
        run: dotnet build --configuration Release --no-restore

      - name: 🔨 Compilation du projet .NET Framework
        run: |
          "& 'C:\Program Files\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin\MSBuild.exe' EasySave2.sln /p:Configuration=Release /p:Platform="Any CPU""
        shell: powershell

      - name: 🧪 Exécution des tests unitaires pour .NET Core/.NET 8
        run: dotnet test --configuration Release --no-restore --verbosity normal --collect:"XPlat Code Coverage"

      - name: 🧪 Exécution des tests unitaires pour .NET Framework
        run: |
          $vsTestPath = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe"
          if (Test-Path $vsTestPath) {
            & $vsTestPath ./Tests/YourTestProject/bin/Release/YourTestProject.dll /Logger:trx
          } else {
            Write-Host "Visual Studio Test Platform non trouvé"
            exit 1
          }
        shell: powershell

      - name: 📊 Upload de la couverture de code vers Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./TestResults/**/*.xml
          fail_ci_if_error: true

      - name: 🔍 Analyse de code avec SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=votre-org
            -Dsonar.projectKey=votre-projet
            -Dsonar.host.url=https://sonarcloud.io
